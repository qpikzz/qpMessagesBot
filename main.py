# qpMessageBot - by t.me/qpikzz
# github - github.com/qpikzz/qpMessagesBot
# –í—ã—Ä–µ–∑–∞–Ω–æ: —Ç–æ–∫–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∫–∏ / —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
# –õ–∏—Ü–µ–Ω–∑–∏—è: CC BY

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.apihelper import ApiTelegramException
import telebot 
import json
import os


# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
token = "¬Ø\_(„ÉÑ)_/¬Ø"
bot = telebot.TeleBot(token, parse_mode="html")


#–§—É–Ω–∫—Ü–∏–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def encode(id):
    return id

def decode(id):
    return id


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ temp
os.makedirs("temp", exist_ok=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start –∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
@bot.message_handler(commands=["start", "menu", "link"])
def start(message):

    # –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    chat = message.chat
    user = message.from_user
    text = message.text

    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Users.txt, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    with open("users.txt","r", encoding="utf-8") as file:
        
        users = json.load(file)

        if encode(user.id) not in users:
            users.append(encode(user.id))
            with open("users.txt","w", encoding="utf-8") as file:
                json.dump(users, file, ensure_ascii=False, indent=4)


    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º—É-—Ç–æ
    if len(text.split()) == 1:
        k = InlineKeyboardMarkup()
        b1 = InlineKeyboardButton(text="‚úà –ü–µ—Ä–µ—Å–ª–∞—Ç—å", url=f"https://t.me/share/url?url=t.me/qpMessagesBot?start={encode(user.id)}")
        k.add(b1)
        bot.send_message(chat.id, f"<b>üè∑ –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:</b>\nüëâ t.me/qpMessagesBot?start={encode(user.id)}\n\nüéØ –û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º, –¥–æ–±–∞–≤—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", reply_markup=k)
    
    
    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º—É-—Ç–æ
    else:

        recip = decode(text.split()[1])

        with open("users.txt","r", encoding="utf-8") as file:
            users = json.load(file)
            if encode(recip) not in users:
                bot.send_message(chat.id, "üßê –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!")
                return None

        if recip == user.id:
            bot.send_message(chat.id, "üòï –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ.")
            return None

        bot.send_message(chat.id,f"üí≠ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\nüéû –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∫—Ä—É–∂–æ–∫, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!\n\nüö´ –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞), –Ω–∞–ø–∏—à–∏ \"<code>–û—Ç–º–µ–Ω–∞</code>\"")
        bot.register_next_step_handler(message, lambda msg: sendMessage(msg, recip))

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def sendMessage(message, recip):

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    chat = message.chat
    user = message.from_user
    first_name = user.first_name if user.first_name else ""
    last_name = user.last_name if user.last_name else ""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–∞–ø–∞
    k = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton(text="üóØ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer {user.id}")
    b2 = InlineKeyboardButton(text="üí§ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="ignore")
    k.add(b1, b2)


    try:

        if message.content_type == "text":

            if "–æ—Ç–º–µ–Ω–∞" in message.text.lower() or "\"–æ—Ç–º–µ–Ω–∞\"" in message.text.lower():
                bot.send_message(chat.id,"‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\nüëÅ –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É \"/link\"")
                return None
            
            elif "/start" in message.text.lower() or "/menu" in message.text.lower() or "/link" in message.text.lower():
                bot.send_message(chat.id,"‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
                start(message)
                return None

            if user.username:
                bot.send_message(recip, f"üì´ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {first_name} {last_name} (@{user.username}):\n<blockquote><code>{message.text[:3000]}</code></blockquote>", reply_markup=k)
            
            else:
                bot.send_message(recip, f"üì´ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {first_name} {last_name}:\n<blockquote><code>{message.text[:3000]}</code></blockquote>", reply_markup=k)
            bot.reply_to(message, "üõ© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n‚è± –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")
        

        elif message.content_type == "voice":
            
            fileId = message.voice.file_id
            
            if user.username:
                bot.send_voice(recip, fileId, caption=f"üìØ –ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {first_name} {last_name} (@{user.username}):", reply_markup=k)
            
            else:
                bot.send_voice(recip, fileId, caption=f"üìØ –ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {first_name} {last_name}:", reply_markup=k)
            
            bot.reply_to(message, "üõ© –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n‚è± –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")

        
        elif message.content_type == "video_note":
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä—É–∂–∫–∞ –≤ –≤–∏–¥–µ–æ
            fileId = message.video_note.file_id
            fileInfo = bot.get_file(fileId)
            filePath = fileInfo.file_path
            downloadFile = bot.download_file(filePath)
            with open(f"temp/{fileId}.mp4", "wb") as file:
                file.write(downloadFile)
            
            with open(f"temp/{fileId}.mp4", "rb") as video:
                if user.username:
                    bot.send_video(recip, video, caption=f"üé± –ù–æ–≤—ã–π –∫—Ä—É–∂–æ–∫ –æ—Ç {first_name} {last_name} (@{user.username}):", reply_markup=k)
                else:
                    bot.send_video(recip, video, caption=f"üé± –ù–æ–≤—ã–π –∫—Ä—É–∂–æ–∫ –æ—Ç {first_name} {last_name}:", reply_markup=k)

            bot.reply_to(message, "üé± –ö—Ä—É–∂–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n‚è± –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Å–µ—Ä–≤–µ—Ä–∞
            os.remove(f"temp/{fileId}.mp4")

        elif message.content_type == "photo":
            fileId = message.photo[-1].file_id
            if user.username:
                if message.caption:
                   bot.send_photo(recip, fileId, caption=f"üíæ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç {first_name} {last_name} (@{user.username}).\nüóû –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ: <code><blockquote>{message.caption}</code></blockquote>"[0:2000], reply_markup=k) 
                else:
                    bot.send_photo(recip, fileId, caption=f"üíæ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç {first_name} {last_name} (@{user.username}):", reply_markup=k)
                
            else:
                if message.caption:
                   bot.send_photo(recip, fileId, caption=f"üíæ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç {first_name} {last_name}.\nüóû –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ: <code><blockquote>{message.caption}</code></blockquote>"[0:2000], reply_markup=k) 
                else:
                    bot.send_photo(recip, fileId, caption=f"üíæ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç {first_name} {last_name}:", reply_markup=k)

            bot.reply_to(message, "üíæ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n‚è± –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")

        elif message.content_type == "video":
            if message.video.file_size > 50 * 1024 * 1024:
                bot.reply_to(message, f"üò¶ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ!\n\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50–ú–ë (–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –º–∏–Ω—É—Ç)")

            fileId = message.video.file_id
            if user.username:
                if message.caption:
                   bot.send_video(recip, fileId, caption=f"üéû –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç {first_name} {last_name} (@{user.username}).\nüóû –ü–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ: <code><blockquote>{message.caption}</code></blockquote>"[0:2000], reply_markup=k) 
                else:
                    bot.send_video(recip, fileId, caption=f"üéû –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç {first_name} {last_name} (@{user.username}):", reply_markup=k)
                
            else:
                if message.caption:
                   bot.send_video(recip, fileId, caption=f"üéû –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç {first_name} {last_name}.\nüóû –ü–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ: <code><blockquote>{message.caption}</code></blockquote>"[0:2000], reply_markup=k) 
                else:
                    bot.send_video(recip, fileId, caption=f"üéû –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç {first_name} {last_name}:", reply_markup=k)
            
            bot.reply_to(message, "üéû –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n‚è± –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")

        else:
            bot.reply_to(message, "‚öô –ü–æ–∫–∞ –º—ã –Ω–µ —É–º–µ–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Ç–∞–∫–æ–µ!\nüîß –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É–¥—É—â–µ–º!")

    except ApiTelegramException:
        bot.send_message(chat.id, "ü´£ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!\nü§î –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

        with open("users.txt","r", encoding="utf-8") as file:
            users = json.load(file)
            if encode(user.id) in users:
                users.delete(encode(user.id))
                with open("users.txt","w", encoding="utf-8") as file:
                    json.dump(users, file, ensure_ascii=False, indent=4)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "ignore")
def ignore(call):
    try:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
    except ApiTelegramException:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ :(")


# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: "answer" in call.data)
def answer(call):
    recip = call.data.split()[1]
    bot.send_message(call.message.chat.id,f"üí≠ –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\nüéû –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∫—Ä—É–∂–æ–∫, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!\n\nüö´ –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞), –Ω–∞–ø–∏—à–∏ \"<code>–û—Ç–º–µ–Ω–∞</code>\"")
    bot.register_next_step_handler(call.message, lambda msg: sendMessage(msg, recip))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/privacy"
@bot.message_handler(commands=["privacy"])
def privacy(message):
    bot.reply_to(message,"1. –°–æ–±–∏—Ä–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:\n1.1. ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ ‚Äì —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞).\n\n2. –ú—ã –Ω–µ –≤–∏–¥–∏–º, –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –ø—É–Ω–∫—Ç–µ 1, –∞ —Ç–∞–∫–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∏–¥–∏—Ç:\n3.1. –í–∞—à–µ –∏–º—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ Telegram;\n3.2. –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ Telegram (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏);\n3.3. –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling(non_stop=True)